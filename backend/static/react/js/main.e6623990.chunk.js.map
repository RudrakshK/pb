{"version":3,"sources":["Components/masters.js","Components/addmaster.js","App.js","serviceWorker.js","index.js"],"names":["Masters","masters","deleteMaster","masterList","map","master","index","className","key","name","side","onClick","AddMaster","state","handleChange","e","setState","target","id","value","handleSubmit","preventDefault","console","log","props","addMaster","onSubmit","this","htmlFor","type","onChange","Component","App","filter","prevProps","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAoBeA,G,MAjBC,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,QAAQC,EAAkB,EAAlBA,aAChBC,EAAaF,EAAQG,KAAI,SAACC,EAAOC,GACnC,OACI,yBAAKC,UAAU,SAASC,IAAKF,GACzB,sCAAYD,EAAOI,MACnB,sCAAYJ,EAAOK,MACnB,4BAAQC,QAAS,WAAOT,EAAaI,KAArC,qBAIZ,OACI,yBAAKC,UAAU,eACVJ,K,OCiBES,E,2MA7BXC,MAAQ,CACJJ,KAAM,KACNC,KAAM,M,EAEVI,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOC,GAAKH,EAAEE,OAAOE,S,EAGhCC,aAAe,SAACL,GACZA,EAAEM,iBACFC,QAAQC,IAAI,EAAKV,OACjB,EAAKW,MAAMC,UAAU,EAAKZ,Q,wEAG1B,OACI,6BACI,0BAAMa,SAAUC,KAAKP,cACjB,2BAAOQ,QAAQ,QAAf,UACA,2BAAOC,KAAK,OAAOX,GAAG,OAAOY,SAAUH,KAAKb,eAC5C,2BAAOc,QAAQ,QAAf,UACA,2BAAOC,KAAK,OAAOX,GAAG,OAAOY,SAAUH,KAAKb,eAC5C,gD,GAvBIiB,aC4CTC,E,2MAzCbnB,MAAQ,CACNZ,QAAU,CACR,CAACQ,KAAM,iBAAkBC,KAAK,SAC9B,CAACD,KAAM,eAAgBC,KAAK,SAC5B,CAACD,KAAM,4BAA6BC,KAAK,U,EAG7Ce,UAAY,SAACpB,GACT,IAAIJ,EAAO,sBAAO,EAAKY,MAAMZ,SAAlB,CAA2BI,IACtC,EAAKW,SAAS,CACZf,QAAQA,K,EAGdC,aAAe,SAACgB,GACdI,QAAQC,IAAIL,GACZ,IAAIjB,EAAU,EAAKY,MAAMZ,QAAQgC,QAAO,SAAA5B,GACtC,OAAOA,EAAOI,OAAS,EAAKI,MAAMZ,QAAQiB,GAAIT,QAEhD,EAAKO,SAAS,CACZf,QAAQA,K,mFAIVqB,QAAQC,IAAI,uB,yCAEKW,EAAUC,GAC3Bb,QAAQC,IAAI,qBACZD,QAAQC,IAAIW,EAAUC,K,+BAGtB,OACE,yBAAK5B,UAAU,OACb,6CACA,qCACA,kBAAC,EAAD,CAASL,aAAcyB,KAAKzB,aAAcD,QAAW0B,KAAKd,MAAMZ,UAChE,kBAAC,EAAD,CAAWwB,UAAWE,KAAKF,iB,GApCjBM,aCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"js/main.e6623990.chunk.js","sourcesContent":["import React from 'react';\nimport './masters.css'\n\nconst Masters = ({masters,deleteMaster}) => {\n    const masterList = masters.map((master,index) => {\n        return (\n            <div className=\"master\" key={index}>\n                <div>Name: {master.name}</div>\n                <div>Side: {master.side}</div>\n                <button onClick={() => {deleteMaster(index)}}>Delete Master</button>\n            </div>\n        ) ;\n    })\n    return(\n        <div className=\"master-list\">\n            {masterList}\n        </div>\n    )\n}\n\nexport default Masters\n","import React, {Component} from 'react'\n\nclass AddMaster extends Component{\n    state = {\n        name: null,\n        side: null\n    }\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(this.state);\n        this.props.addMaster(this.state)\n    }\n    render(){\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <label htmlFor=\"name\">Name: </label>\n                    <input type=\"text\" id=\"name\" onChange={this.handleChange} />\n                    <label htmlFor=\"name\">Side: </label>\n                    <input type=\"text\" id=\"side\" onChange={this.handleChange} />\n                    <button>submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddMaster","import React, {Component} from 'react';\nimport Masters from './Components/masters';\nimport AddMaster from './Components/addmaster';\n\nclass App extends Component{\n  state = {\n    masters : [\n      {name: 'Obi Wan Kenobi', side:'light' },\n      {name: 'Qui-Gon Jinn', side:'light' },\n      {name: 'Darth Plaguies - The Wise', side:'dark' }\n    ]\n  }\n  addMaster = (master) => {\n      let masters = [...this.state.masters, master]\n      this.setState({\n        masters:masters\n      })  \n  }\n  deleteMaster = (id) => {\n    console.log(id)\n    let masters = this.state.masters.filter(master => {\n      return master.name !== this.state.masters[id].name\n    })\n    this.setState({\n      masters:masters\n    })\n  }\n  componentDidMount(){\n    console.log('component mounted')\n  }\n  componentDidUpdate(prevProps,prevState){\n    console.log('component updated');\n    console.log(prevProps,prevState)\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>My first app.</h1>\n        <p>React </p>\n        <Masters deleteMaster={this.deleteMaster} masters = {this.state.masters} />\n        <AddMaster addMaster={this.addMaster} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}